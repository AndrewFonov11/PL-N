========== PL-N 1.0.x ========== MANUAL ============

Let's start learning PL-N!

PL-N - This is a minimalist programming language, the syntax of which consists mainly of symbols. In this respect, it is somewhat similar to Brainfuck, but it should not be associated with it, since PL-N uses different symbols, has more capabilities, uses different algorithms and has different limitations.

The interpreter for this programming language is released into the public domain under CC0.

Let's start learning the basics of PL-N.

Let's write a simple program that will display a character on the screen.

Code-
+++++#{/++++++*-}/p

Don't understand anything? Don't worry.

Meaning of symbols in PL-N:
+ - increase the value of the current cell.
- - same as above, but decrease.
/ - go to the next cell.
* - go to the previous cell.
p - display the symbol that corresponds to the code of the current cell(to go to the next line, add "l" after "p", added in interpreter version 1.0.7).
i - enter the symbol into the cell.
# - multiply the value of the cell by 2.
^ - reset the current cell.
! - reset all cells.
( - start the main loop (it will continue until the very first cell is = 0).
) - end of the main loop.
{ - start "loop-loop" (works almost the same as the main loop, but starting with the interpreter version 1.0.2 this type of loop checks the current cell at the start of the loop, if it is equal to 0, then the loop ends).
} - end of "loop-loop".
= - compares the current cell with the next cell after the current one, if they are equal, the value of the previous (relative to the current) cell is increased (this mechanic was introduced in the interpreter version 1.0.2).
< - same, but now the operation is if the current cell<next.
> - same, but now the operation is if the current cell>next.
s - save a symbol to the current cell (added in 1.0.3, the symbol to save follows immediately after the operation symbol).
r - generate a random value and write it to the current cell (added in 1.0.4, improved in 1.0.5).
@ - go to the very first cell (number 0, added in 1.0.5).
n - similar in meaning to 'p', but outputs not the character by ASCII code, but the numeric value of the current cell(added in 1.0.6).
v - similar in meaning to 'i', but enters not a symbol, but a numeric value into the current cell, there is also a variation v+ (adds the entered number to the number in the cell) and v- (subtracts), added in 1.0.6.
e - end of the program.

If an error is detected in the code, the interpreter will report it (added in version 1.0.7).

A memory cell is a "container" that stores a numeric value. There can be 999999 such cells in PL-N.

In the 1.0.1 version of the interpreter, a bug was fixed where the .exe file did not start well. However, it also slightly changed the memory cell limit, now the limit is 99999.

This set of commands should be enough for you to write any algorithm.

We've already figured out how to output characters. Now let's write a simple "Hello World" program.

Code(interpreter version before 1.0.3)-
++++++++{/++++{/++/+++/+++/+****-}/+/+/-//+{*}*-}//p/---p+++++++pp+++p//p*-p*p+++p------p--------p//+p/++p

Code(since 1.0.3)-
sHp^sep^slpp^sop^s p^sWp^sop^srp^slp^sdp^s!p

Now we are ready for a new test. Let's write a program that will check the entered symbol. If it was the symbol "H", then the program will output the number 1, and if not, then 0.

Code(interpreter version before 1.0.3)-
i/+++++#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*=*/^+++++#++++++++++++++++++++++++++++++++++++++/(/+++++++++++++++++++++++++++++++++++++++++++++++++p**-)^*^+++++#{/++++*-}/+++++++++p

But you will come up with an analogue of this program using the operation "s" yourself.

Do you like math? Let's write the simplest calculator in PL-N!

Code-
i/s+*=(^vv+n*-)/s-*=(^vv-n*-)

Another option is this:

Code-
i/s+*=(^vv+ne)/s-*=(^vv-ne)

We will request an operation (+/-), then a number, and depending on the answer we will output the result.

Good luck! :)
